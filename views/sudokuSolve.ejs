<!DOCTYPE html>
<html>
<head>
  <title>SUDOKU SOLVING</title>
  <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css"> <!-- load bootstrap css -->
  <link rel="stylesheet" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.min.css"> <!-- load fontawesome -->
  <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js"></script>
  <style>
    .nopadding {
      padding: 0;
      margin: 0;
      width: 11.1%;
    }
  </style>
</head>
<body ng-app="myApp" ng-controller="solveCtrl">
  <div class='container'>
    <h1>SUDOKU SOLVING</h1>
      <div ng-repeat="row in sudoku" class="row" ng-init="i = $index">
        <div ng-repeat="element in row track by [$index]" ng-init="j = $index" class="col-sm-1 nopadding">
          
          <input ng-model="sudoku[i][j]" onchange="this.style.color='black';" type='text' style='font-size: 60px; font-weight:bold; color:red; background-color: yellow; text-align:center; width:100%' size="1" maxlength="1" ng-if="(i<3||i>5)&&(j<3||j>5)||((2<i&&i<6)&&(2<j&&j<6))">

          <input ng-model="sudoku[i][j]" onchange="this.style.color='black';" type='text' style='font-size: 60px; font-weight:bold; color:red; text-align: center; width:100%' size="1" maxlength="1" ng-if="(i<3||i>5)&&(2<j&&j<6)||((2<i&&i<6)&&(j<3||j>5))">
        
        </div>
      </div>
    <p ng-hide="hide" ng-model='alert' style='font-size: 28px; font-weight:bold; color:red'>{{ alert }}</p>
    <button class='btn btn-danger btn-lg' ng-click="sudokuSolve()">SOLVE</button>
    <a href="/sudoku/solve" class='btn btn-success btn-lg'>RESET</a>
    <a href='/' class='btn btn-primary btn-lg'>HOME</a></div>
  </div>
  <script>
      var app = angular.module('myApp',[]);
      app.controller('solveCtrl', function($scope, $timeout){
        $scope.sudoku =  [
          ['','','','','','','','',''],
          ['','','','','','','','',''],
          ['','','','','','','','',''],
          ['','','','','','','','',''],
          ['','','','','','','','',''],
          ['','','','','','','','',''],
          ['','','','','','','','',''],
          ['','','','','','','','',''],
          ['','','','','','','','','']  
        ];
        $scope.hide = true;
        

        function checkRow(i, j, k){
          for (var x = 0; x < 9; x++){
            if ($scope.sudoku[i][x] == k && x!=j) {
              return false;
            }
          }
          return true;
        }

        function checkCol(i, j, k){
          for (var x = 0; x < 9; x++){
            if ($scope.sudoku[x][j] == k && x!=i) {
              return false;
            }
          }
          return true;
        }
        
        function check3x3(i, j, k){
          for (var m = Math.floor(i/3)*3; m < Math.floor(i/3)*3 + 3; m++){
            for (var n = Math.floor(j/3)*3; n < Math.floor(j/3)*3 + 3; n++){
              if ($scope.sudoku[m][n] == k && (m!=i || n!=j)) {
                return false;
              }
            }
          }
          return true;
        }

        function solve(i, j){
          if (!$scope.sudoku[i][j]) {
            for (var k = 1; k < 10; k++){
              if (flag) break;
              if (checkRow(i, j, k) && checkCol(i, j, k) && check3x3(i,j,k)) {
                $scope.sudoku[i][j] = k;
                if (j<8) {
                  solve(i, j+1);
                  if (!flag) $scope.sudoku[i][j] = 0;
                }
                else if (i<8) {
                  solve(i+1, 0);
                  if (!flag) $scope.sudoku[i][j] = 0;
                }
                else {
                  flag = true;
                }
              }
            }
          }
          else if (j<8) {
            solve(i, j+1);
          }
          else if (i<8) {
            solve(i+1, 0);
          }
          else {
            flag = true;
          }
        }

        function checkSudoku(sudoku){
          for (var i=0; i<9; i++){
            for (var j=0; j<9; j++){
              if (sudoku[i][j]){
                if (!checkRow(i, j, sudoku[i][j]) || !checkCol(i, j, sudoku[i][j]) || !check3x3(i,j,sudoku[i][j])) {
                  return false;
                }
              }
            }
          }
          return true;
        }

        var flag = false;
        $scope.sudokuSolve = function(){
          flag = false;
          if (!checkSudoku($scope.sudoku)){
            $scope.hide = false;
            $scope.alert = 'Your SUDOKU is impossible to solve';
          }
          else solve(0, 0);
        }
      }); 
    </script>
</body>
</html>